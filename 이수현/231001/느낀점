유니온 파인드로 집합을 합치고, 합쳐져있는지 확인하는 문제이다.
양쪽 배열에다가 더하는 방법이 있지 않을까?
트리로 구현하고 헤드를 비교해야하나?



Union (합친다)
Connected(a,b) true면 연결되어있다

QuickFind : 각 객체가 어느 연결된 덩어리에 속하는지 크기 N의 배열에 기록 & 업데이트

ids[]가 같으면 같은 덩어리

 enumerate()라는 내장 함수를 통해 이러한 인덱스 변수를 사용하지 않고 루프를 돌리는 방식이 선호되며 이런 코딩 스타일을 소위 Pythonic, 즉 파이썬 답다고 하죠.

 connected component를 tree로 보고 ids[i]를 parent라고 하면
 root가 같으면 같은 덩어리


 왜 시간초과가 뜨지?
 import sys

input = sys.stdin.readline
ary = []
a, b, c = 0, 0, 0
N, M = map(int, input().split(" "))
for _ in range(M):
    ary.append(list(map(int, input().split(" "))))


def unionFind(ary, N):
    ids = []
    for idx in range(N + 1):
        ids.append(idx)

    def connected(p, q):
        return ids[p] == ids[q]

    def minMax(a, b):
        if a < b:
            return a, b
        else:
            return b, a

    def union(p, q):
        id1, id2 = minMax(ids[p], ids[q])
        for idx, _ in enumerate(ids):
            if ids[idx] == id2:
                ids[idx] = id1

    for i in range(len(ary)):
        if ary[i][0] == 0:
            union(ary[i][1], ary[i][2])
        else:
            print("YES") if connected(ary[i][1], ary[i][2]) else print("NO")


unionFind(ary, N)


---
import sys
input = sys.stdin.readline
ary = []
a, b, c = 0, 0, 0
N, M = map(int, input().split(" "))
for _ in range(M):
    ary.append(list(map(int, input().split(" "))))


def unionFind(ary, N):
    def find(x):
        if parent[x] == x:
            return x
        parent[x] = find(parent[x])  # 경로 압축
        return parent[x]

    parent = list(range(N + 1))  # 각 원소의 부모를 자기 자신으로 초기화

    def union(p, q):
        root_p = find(p)
        root_q = find(q)
        if root_p != root_q:
            parent[root_p] = root_q  # 균형 잡힌 트리 유지

    for i in range(len(ary)):
        if ary[i][0] == 0:
            union(ary[i][1], ary[i][2])
        else:
            print("YES") if find(ary[i][1]) == find(ary[i][2]) else print("NO")


unionFind(ary, N)

런타임 에러 발생
-> 재귀 호출의 깊이를 줄이기 위해 재귀 대신 반복문을 사용하여 경로 압축을 구현할 수 있습니다. 다음은 경로 압축을 반복문으로 구현한 코드입니다: