
4 5 1 3 2
7번째라면 앞에 부분은 이미 정렬 됐을 거 같은데?
시간을 단축할 수 있을 것 같다.
근데 몇 번째이지?

5 -> 1+1=2 +1 =3
log2

2 => 1 2 = 2 2^1
3 => 1 3 2
(2) + (3) = 5
4 => 4 5 1 3 = 2^3
(2) + (2) + (4) = 8
5 => 12 
(2)+(3) (2)+(5)
6 => 16
(2+(3)) + (2+3) +6

N -> 몇개가 나올지 알 수 있나?
K -> 큰 뭉텅이 생략하고 뽑을 수 있나?
4 5 1 3 2
N 을 2로 계속 나누어서 5/2 =2.1


4 5
1 4 5
2 3
1 2 3 4 5

문제 참조
-----

merge_sort(A[p..r]) { # A[p..r]을 오름차순 정렬한다.
    if (p < r) then {
        q <- ⌊(p + r) / 2⌋;       # q는 p, r의 중간 지점
        merge_sort(A, p, q);      # 전반부 정렬
        merge_sort(A, q + 1, r);  # 후반부 정렬
        merge(A, p, q, r);        # 병합
    }
}

# A[p..q]와 A[q+1..r]을 병합하여 A[p..r]을 오름차순 정렬된 상태로 만든다.
# A[p..q]와 A[q+1..r]은 이미 오름차순으로 정렬되어 있다.
merge(A[], p, q, r) {
    i <- p; j <- q + 1; t <- 1;
    while (i ≤ q and j ≤ r) {
        if (A[i] ≤ A[j])
        then tmp[t++] <- A[i++]; # tmp[t] <- A[i]; t++; i++;
        else tmp[t++] <- A[j++]; # tmp[t] <- A[j]; t++; j++;
    }
    while (i ≤ q)  # 왼쪽 배열 부분이 남은 경우
        tmp[t++] <- A[i++];
    while (j ≤ r)  # 오른쪽 배열 부분이 남은 경우
        tmp[t++] <- A[j++];
    i <- p; t <- 1;
    while (i ≤ r)  # 결과를 A[p..r]에 저장
        A[i++] <- tmp[t++]; 
}